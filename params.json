{"name":"Console-log-to-document","tagline":"Provides the output of `console.log()` into the document.","body":"# console-log-to-document\r\nProvides the output of `console.log()` into the document.\r\n\r\n## How to use\r\n\r\nThis is actually really easy to use!\r\n\r\n1- Get either the minified/packed version or the plain version to study and change code,\r\n\r\n2- Include the files in your HTML pages or copy-paste the code directly into your browser's console,\r\n\r\n3- Add `console._RELAY_TO_DOC = true;` to your Javascript.\r\n\r\n4- Use the `console.log()` on the way you intended!\r\n\r\n5- You have finished all the steps to use the code!<br>\r\n   No more opening the console! (but the output is still redirected there)\r\n\r\n## Advanced usage\r\n\r\nThere are a few settings that you can use to change the functionality of your code.\r\n\r\n- `console._RELAY_TO_DOC = true;` or `console._RELAY_TO_DOC = elem;`<br>\r\n  If an element is provided, the console messages will be placed in it.<br>\r\n  If it simply is another truthy value, then the elements are added to `document`.\r\n\r\n- `console._USE_JSON = true;`<br>\r\n  Enables or disables a simple JSON output. Nothing fancy will be shown: just what is returned by `JSON.stringify()`.\r\n\r\n- `console._SHOW_COOL_NUMBERS = true;`<br>\r\n  Shows the number in binary, octal and hexadecimal.<br>\r\n  E.g.: `5 (0x5, 0o5, 0b101)`\r\n\r\n- `console._SHOW_TYPES = true;`<br>\r\n  Shows the datatype of a value<br>\r\n  E.g.: `(number) 5`\r\n\r\n- `console._SHOW_STRING_LENGTH = true;`<br>\r\n  Shows the length of a string<br>\r\n  E.g.: `\"Test\" (length: 4)`\r\n\r\nRemember, if you enable `console._USE_JSON = true;`, all the other options won't take effect. Except the 1st, obviously.<br>\r\nAll the changes made will only be reflected on the next time you run `console.log()`.\r\n\r\n## Methods\r\n\r\n2 Useful methods are added to the console:\r\n\r\n- `console._restore_old_method()`<br>\r\n  Restores any `console` to the value it was **before**  running this code.\r\n\r\n- `console._restore_relay_method()`<br>\r\n  Restores any `console` to the value it was **after**  running this code.\r\n\r\n## Writting to the console\r\n\r\nIt is really easy to write into the console:<br>\r\nSimply call `console.log()` and you are set!\r\n\r\nIt has nearly-identical to the native console output.<br>\r\nAlso, this supports formatted strings (in a very basic form):\r\n\r\n- `%s` - Will parse the next argument as a string.\r\n- `%i` or `%d` - Will parse the next argument as an integer.\r\n- `%f` - Will parse the next argument as a floating-point number.\r\n- `%f.<size>` - **Non-standard** Will parse the next argument as a floating number with `<size>` decimal digits.\r\n- `%c` - **Not supported**\r\n\r\nUsing `console.clear()` will delete the messages that were added to the element/document.<br>\r\nThis is enabled by default.\r\n\r\n##Implemented `console` methods:\r\n\r\n- `log`\r\n- `error`\r\n- `warn`\r\n- `info`\r\n- `time`\r\n- `timeEnd`\r\n- `clear`\r\n\r\nAll the following methods work as expected.<br>\r\nAlso, they display an icon to identify the message type.\r\n\r\nThis also catches uncaught errors and exceptions.<br>\r\nAll credits due to the user <a href=\"http://meta.stackexchange.com/users/159427/canon\">@canon</a> on http://meta.stackexchange.com/ for this, on <a href=\"http://meta.stackexchange.com/a/242491/289125\">his awesome code</a><br>\r\nHe was kind enough to let me use his code!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}